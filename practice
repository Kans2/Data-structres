Hour glass sum 
// first initialize matrix max value.
2 -loops calculate matrix use (i,j)
calculate sum  let sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] +
                      arr[i+1][j+1] +
                      arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2];



//Rotate array problem

         function Rotateleft(d,arr){

          let n = arr.length;
          d = d % n;

          let rotatearray = arr.slice(d).concat(arr.slice(0,d));
           return rotatearray;
}

//Array sparse problem same value index number

function matchingStrings(stringList, queries) {
    // Write your code here
    
   let result  = [];
   
   
   
   for(let query of queries){
       
       let count  = 0;
       
       for(let str of stringList){
           
           if( str === query){
               count ++;
           }
       }
       return result.push(count);
       
   }




//Linked list Head node

function printLinkedList(head){
    
   
    let current = head;
    
    while(current !== null){
         console.log(current.data);
         current = current.next;
    }

}


//Array Manipulation 
 first  namma question n - number of elements
                      quries- 2 Dimensional array
                      each [i]- 3 number of integers.


//sol 
     2d - array rows and colums the store [5][3] --> computer store pannuthu 
                                          value add panna - push 
                                          index of value - add

             1   2   3   4   5
          1 100 100
          2     100 100 100 100
          3         100 100
   max>>    100 200 200 200 100  = 200  return panunum

                //initialize
                function manipulate(n, quries){
                let arr = new Array(n + 1).fill(0);

                for(let [a,b,k] of queries){

                       arr[a]+= k;
                      if(b + 1 >= n){
                           arr[b+1]-= k;
                      }
                   
                }


///           maximum valueb return
                 current_value = 0;
                 max_value = 0;
                for(let i=1; i<= n; i++){
                          if(current_value > max_value){
                                max_value = current_value
                            }
                     }
                  return max_value;
                }

   



//DICTIONARIES (OR) Hash map

import java.util.*;
import java.io.*;

class Solution {
    public static void main(String []argh){
        Scanner in = new Scanner(System.in);
        Map<String, Integer> phoneBook = new HashMap<>();
        
        int n = in.nextInt();
        in.nextLine();  // Consume the newline character
        
        // Read and store the phone book entries
        for (int i = 0; i < n; i++) {
            String name = in.next();
            int number = in.nextInt();
            in.nextLine();  // Consume the newline character
            phoneBook.put(name, number);
        }
        
        // Handle queries
        while (in.hasNext()) {
            String query = in.next();
            if (phoneBook.containsKey(query)) {
                System.out.println(query + "=" + phoneBook.get(query));
            } else {
                System.out.println("Not found");
            }
        }
        
        in.close();
    }
}

///hashmap example use

HashMap<String, Integer> group1 = new HashMap<>();
group1.put("Alice", 1);   // Alice is in Group 1 with desk number 1
group1.put("Bob", 2);     // Bob is in Group 1 with desk number 2
group1.put("Charlie", 3); // Charlie is in Group 1 with desk number 3

String[] group2 = {"Eve", "Charlie", "Alice"};  // Group 2 students

for (String s : group2) {
    if (group1.containsKey(s)) {
        System.out.println(s + " is in both groups, with desk number " + group1.get(s) + " in Group 1.");
    } else {
        System.out.println(s + " is only in Group 2.");
    }
}




