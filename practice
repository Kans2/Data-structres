Hour glass sum 
// first initialize matrix max value.
2 -loops calculate matrix use (i,j)
calculate sum  let sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] +
                      arr[i+1][j+1] +
                      arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2];



//Rotate array problem

         function Rotateleft(d,arr){

          let n = arr.length;
          d = d % n;

          let rotatearray = arr.slice(d).concat(arr.slice(0,d));
           return rotatearray;
}

//Array sparse problem same value index number

function matchingStrings(stringList, queries) {
    // Write your code here
    
   let result  = [];
   
   
   
   for(let query of queries){
       
       let count  = 0;
       
       for(let str of stringList){
           
           if( str === query){
               count ++;
           }
       }
       return result.push(count);
       
   }




//Linked list Head node

function printLinkedList(head){
    
   
    let current = head;
    
    while(current !== null){
         console.log(current.data);
         current = current.next;
    }

}


//Array Manipulation 
 first  namma question n - number of elements
                      quries- 2 Dimensional array
                      each [i]- 3 number of integers.


//sol 
     2d - array rows and colums the store [5][3] --> computer store pannuthu 
                                          value add panna - push 
                                          index of value - add

             1   2   3   4   5
          1 100 100
          2     100 100 100 100
          3         100 100
   max>>    100 200 200 200 100  = 200  return panunum

                //initialize
                function manipulate(n, quries){
                let arr = new Array(n + 1).fill(0);

                for(let [a,b,k] of queries){

                       arr[a]+= k;
                      if(b + 1 >= n){
                           arr[b+1]-= k;
                      }
                   
                }
///           maximum valueb return
                 current_value = 0;
                 max_value = 0;
                for(let i=1; i<= n; i++){
                          if(current_value > max_value){
                                max_value = current_value
                            }
                     }
                  return max_value;
                }

   








