import java.util.ArrayList;

public class MaxHeap {

    private ArrayList<Integer> heap;

    public MaxHeap() {
        heap = new ArrayList<>();
    }

    // Method to insert a new value into the heap
    public void insert(int value) {
        heap.add(value);           // Add the new value to the end of the heap
        int index = heap.size() - 1; // Get the index of the newly added element
        heapifyUp(index);           // Restore the max-heap property
    }

    // Method to restore the max-heap property after insertion
    private void heapifyUp(int index) {
        int parentIndex = (index - 1) / 2; // Calculate the parent index

        // Continue while the current index is not the root and the parent is smaller than the current value
        if (index > 0 && heap.get(index) > heap.get(parentIndex)) {
            swap(index, parentIndex);    // Swap with the parent
            heapifyUp(parentIndex);      // Continue heapifying up
        }
    }

    // Method to restore the max-heap property after removal
    private void heapifyDown(int index) {
        int leftChildIndex = 2 * index + 1;
        int rightChildIndex = 2 * index + 2;
        int largest = index;

        // Check if the left child is larger
        if (leftChildIndex < heap.size() && heap.get(leftChildIndex) > heap.get(largest)) {
            largest = leftChildIndex;
        }

        // Check if the right child is larger
        if (rightChildIndex < heap.size() && heap.get(rightChildIndex) > heap.get(largest)) {
            largest = rightChildIndex;
        }

        // Swap with the largest child if needed
        if (largest != index) {
            swap(index, largest);
            heapifyDown(largest); // Continue heapifying down
        }
    }

    // Method to remove and return the maximum value (the root)
    public int removeMax() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }
        int max = heap.get(0);          // The root contains the maximum value
        int lastIndex = heap.size() - 1; // Index of the last element
        heap.set(0, heap.get(lastIndex)); // Move the last element to the root
        heap.remove(lastIndex);        // Remove the last element
        heapifyDown(0);                // Restore the max-heap property
        return max;
    }

    // Method to swap two elements in the heap
    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }

    // Method to print the heap
    public void printHeap() {
        System.out.println(heap);
    }

    // Main method to test the MaxHeap class
    public static void main(String[] args) {
        MaxHeap maxHeap = new MaxHeap();

        maxHeap.insert(10);
        maxHeap.insert(20);
        maxHeap.insert(15);
        maxHeap.insert(30);
        maxHeap.insert(25);

        System.out.println("Heap after insertions:");
        maxHeap.printHeap();

        System.out.println("Removed max: " + maxHeap.removeMax());
        System.out.println("Heap after removing max:");
        maxHeap.printHeap();
    }
}
